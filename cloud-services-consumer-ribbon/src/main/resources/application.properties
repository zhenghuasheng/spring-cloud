spring.application.name=ribbon-consumer
server.port=3333
eureka.client.serviceUrl.defaultZone=http://admin:admin@localhost:1111/eureka/


# 开启健康检查（需要spring-boot-starter-actuator依赖）
eureka.client.healthcheck.enabled=true
# 续约更新时间间隔（默认30秒）
eureka.instance.leaseRenewalIntervalInSeconds=10
# 续约到期时间（默认90秒）
eureka.instance.leaseExpirationDurationInSeconds=20


spring.rabbitmq.host=117.48.199.197
spring.rabbitmq.port=5672
spring.rabbitmq.username=zhenghuasheng
spring.rabbitmq.password=zhs2111014

#负载均衡-随机
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #轮调
compute-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule




#同样可以通过listOfServers指定，达到负载均衡的效果,多个二地址"，"分割
#ribbon.eureka.enabled =true
#compute-service.ribbon.listOfServers=localhost:2222


# 解决第一次请求报超时异常的方案，因为 hystrix 的默认超时时间是 1 秒，因此请求超过该时间后，就会出现页面超时显示 ：
#
# 这里就介绍大概三种方式来解决超时的问题，解决方案如下：
#
# 第一种方式：将 hystrix 的超时时间设置成 5000 毫秒
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds= 5000
#
# 或者：
# 第二种方式：将 hystrix 的超时时间直接禁用掉，这样就没有超时的一说了，因为永远也不会超时了
# hystrix.command.default.execution.timeout.enabled: false
#
# 或者：
# 第三种方式：索性禁用feign的hystrix支持
#feign.hystrix.enabled: false ## 索性禁用feign的hystrix支持


hystrix.command.default.execution.isolation.strategy=semaphore
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=10


